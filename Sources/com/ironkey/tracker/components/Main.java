// Generated by the WOLips Templateengine Plug-in at Apr 11, 2012 11:05:03 AM
package com.ironkey.tracker.components;

import com.webobjects.appserver.*;
import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.directtoweb.D2W;
import java.net.InetAddress;
import com.ironkey.tracker.*;

public class Main extends WOComponent {
	private static final long serialVersionUID = 1L;
    public String username;
    public String password;
    public String errorMessage;
    public boolean wantsWebAssistant = false;
    public boolean isAssistantCheckboxVisible = false;

	public Main(WOContext context) {
		super(context);
	
	    getCookieInfo();
		getDefaultProjectFromCookie();
	    try {
	        InetAddress local = InetAddress.getLocalHost();
	        String hostname=local.getHostName();
	System.out.println("hostname - " + hostname);
			if(hostname.equals("Kevin-Avoys-MacBook.local")) {
	            wantsWebAssistant=true;
	        }
	    }
	    catch(Exception e) {
	        System.err.println("Main.Main() - " + e);
	    }
	}

    // Check to see if cookies are set and default the login/password fields to the correct values if so
    public void getCookieInfo() {
        WOContext context = context();
        WORequest request = context.request();
        //NSDictionary cookies = request.cookieValues();
        //Enumeration enumer = cookies.keyEnumerator();
       // while(enumer.hasMoreElements()) {
        //    String key = (String)enumer.nextElement();
            //System.out.println("key - " + key + "  / Value - " + cookies.valueForKey(key));
        //}
        String user = request.cookieValueForKey("tracker_loginName");
        if(user != null) {
           username = user;
        }
        String pw = request.cookieValueForKey("tracker_pw");
        
        if(pw != null) {
           password = pw;
        }
       // String default_project = request.cookieValueForKey("default_project");
    }
	
    public void getDefaultProjectFromCookie() {
        WOContext context = context();
        WORequest request = context.request();
		Session s;
		String default_project = null;
		        
		s = (Session)session();
		default_project = request.cookieValueForKey("default_project");
		if(default_project != null) {
			s.setSelectedProject(default_project);
        }
    }


    // Set cookies so users don't need to reenter credentials all the time.
    public void setCookieInfo() {
        NSTimestamp now = new NSTimestamp();
        NSTimestamp yearFromNow = now.timestampByAddingGregorianUnits(1,0,0,0,0,0);
        WOContext context = context();
        WOResponse response = context.response();
        WORequest request = context.request();

        WOCookie cookie = new WOCookie("tracker_loginName", username);
        cookie.setExpires(yearFromNow);
        cookie.setPath(request.adaptorPrefix() + "/");
        //cookie.setPath(request.adaptorPrefix() + "/" + request.applicationName());
        response.addCookie(cookie);

        WOCookie cookie2 = new WOCookie("tracker_pw", password);
        cookie2.setExpires(yearFromNow);
        cookie2.setPath(request.adaptorPrefix() + "/");
        response.addCookie(cookie2);
    }

    public WOComponent defaultPage() {
        Session session;
        EOEditingContext editingContext;
        NSArray<EOEnterpriseObject> potentialUsers;
        EOEnterpriseObject userObject;
        NSMutableArray<EOQualifier> qual;
        EOQualifier qualifier;
        session = (Session)session();
        session.setUser(null);

        // Handle user login
        if (username!=null && password!=null) {
            qual = new NSMutableArray<EOQualifier>();
            editingContext = session.defaultEditingContext();
            // Fetching a person with login and password will return only 1 record if it is a valid login.
            qualifier = EOQualifier.qualifierWithQualifierFormat("loginName = '" + username+"'", null);
            qual.addObject(qualifier);
            
            EOAndQualifier userQualifier = new EOAndQualifier(qual);
            EOFetchSpecification specification = new EOFetchSpecification("Profiles", userQualifier, null);
            specification.setIsDeep(false);
            // Perform actual fetch
            potentialUsers = (NSArray<EOEnterpriseObject>)editingContext.objectsWithFetchSpecification(specification);
            if (potentialUsers.count() == 1) {
                errorMessage = "";
                setCookieInfo();  // Set a cookie if they are valid, so they don't need to enter credentials nexttime.
                userObject = (EOEnterpriseObject)potentialUsers.lastObject();  // Get the user
                session.setUser(userObject);  // Store the user in the session.
                                              // Check if user is an Admin, only admins get the 'customize' option for displaying the dtw applet.
                                              //Integer isAdmin=(Integer)userObject.storedValueForKey("isAdmin");
                                              //D2W.factory().setWebAssistantEnabled(isAdmin!=null && isAdmin.intValue()!=0);
                D2W.factory().setWebAssistantEnabled(wantsWebAssistant);

                setDefaultProject();
                if(session.valueForKey("homePage") == null) {
                    session.homePage = (HomePage)pageWithName("HomePage");
                    NSDictionary<Object, Object> bindings2 = new NSDictionary<Object, Object>(new Object[] {userObject, session.selectedProject()}, new Object[] {"user", "version"});
                    EOFetchSpecification fs=EOFetchSpecification.fetchSpecificationNamed("myBugs", "Item").fetchSpecificationWithQualifierBindings(bindings2);
                    //fs.setIsDeep(true);
                    NSArray<EOEnterpriseObject> assignedItems = (NSArray<EOEnterpriseObject>)editingContext.objectsWithFetchSpecification(fs);
                   // if (assignedItems.count() >0) {
                   //     session.homePage.setIsMyBugs(true);
                   // }
                   //else {
                   //    session.homePage.setIsProject(true);
                        session.homePage.setIsRelease(true);
                   // }
                }
                return session.homePage;
            }
            else {
                errorMessage="Sorry login incorrect!";
                return null;
            }
        }
        else {
            errorMessage="Please specify both fields!";
            return null;
        }
    }

    public void setDefaultProject() {

        WOContext context = context();
        if(context != null) {
            WORequest request = context.request();
            String default_project = request.cookieValueForKey("default_project");
            //System.out.println("default_project - " + default_project);
			//default_project = "1.0.1";
            if(default_project != null) {
                Session s = (Session)session();
				s.takeValueForKey(default_project, "selectedProject");
            }
        }
    }
}
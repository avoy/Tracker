// Generated by the WOLips Templateengine Plug-in at Apr 11, 2012 11:05:03 AM
package com.ironkey.tracker;

import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSLog;
import com.webobjects.appserver.*;
import er.javamail.*;

public class Application extends WOApplication {
	protected NSArray<String> potentialSeverities;
	protected NSArray<String> potentialStatus;
	protected NSArray<String> potentialPriority;
	protected NSArray<String> potentialProducts;
	protected NSArray<String> potentialTypes;
	protected NSArray<String> potentialStates;
	protected NSArray<String> potentialVersions;
	protected NSArray<String> potentialVerticals;
	protected NSArray<String> potentialComponents;
	protected NSArray<String> potentialResolutions;
	protected NSArray<String> potentialMilestones;
	protected NSArray<String> currentProjects;
	protected NSDictionary<String, Short> idsForProducts;	
	protected String bugzillaHostUrl;
	protected String bugzillaHost;
	protected String bugzillaProtocol;
	protected boolean isImation = false;
	
	public static void main(String[] argv) {
		System.out.println("Application.main()");
		WOApplication.main(argv, Application.class);
	}

	public Application() {
        super();
        try {
        	
    		//  Note: any exceptions within the Application() constructor will result in a javax.servlet.UnavailableException: Error initializing servlet adaptor: null
    		//2012-08-28 14:05:08 StandardContext[/Tracker]Servlet /Tracker threw load() exception
    		// The last one was caused by failing to read the bugzilla.host property from the properties file.  
    		// Adding the exception handler in the constructor

			NSLog.out.appendln("Welcome to " + name() + " !");
			setAllowsConcurrentRequestHandling(true);
	        statisticsStore().setPassword("blah");
			setSMTPHost("smtp-notls.hq.ironkey.com");
	        setSessionTimeOut(new Integer(7200));
	        setPageRefreshOnBacktrackEnabled(false);	
	        
	        //Class mainClass = _NSUtilities.classWithName("Main");
	        //System.out.println("Main class is " + mainClass.getName());
			
	        bugzillaHost = (String)System.getProperty( "bugzilla.host");
			if(bugzillaHost == null) {
				bugzillaHost = "bugzilla.hq.ironkey.com";
			}			
			
			bugzillaProtocol = (String)System.getProperty( "bugzilla.protocol");
			if(bugzillaProtocol == null) {
				//bugzillaProtocol = (String)ERXProperties.stringForKey( "bugzilla.protocol");
				//System.out.println("bugzillaProtocol - " + bugzillaProtocol);

				bugzillaProtocol = "http";
			}
			
			bugzillaHostUrl = bugzillaProtocol + "://" + bugzillaHost;
			isImation = bugzillaHost.equals("bugzilla.hq.ironkey.com")?false:true;
			bugzillaHostUrl = ((Application)Application.application()).bugzillaHostUrl();
	
	        /*
			//EOAdaptorContext.setDebugEnabledDefault(true);
			System.setProperty("er.javamail.centralize", ERXProperties.stringForKey( "er.javamail.centralize") );
			System.setProperty("er.javamail.adminEmail", ERXProperties.stringForKey( "er.javamail.adminEmail") );
			System.setProperty("er.javamail.smtpHost", ERXProperties.stringForKey( "er.javamail.smtpHost") );
			System.setProperty("er.javamail.smtpPort", ERXProperties.stringForKey( "er.javamail.smtpPort") );
			System.setProperty("er.javamail.smtpAuth", ERXProperties.stringForKey( "er.javamail.smtpAuth") );
			System.setProperty("er.javamail.useSenderDelay", ERXProperties.stringForKey( "er.javamail.smtpPort") );
			System.setProperty("er.javamail.senderDelayMillis", ERXProperties.stringForKey( "er.javamail.senderDelayMillis") );
			System.setProperty("er.javamail.defaultEncoding", ERXProperties.stringForKey( "er.javamail.defaultEncoding") );
			System.setProperty("er.javamail.debugEnabled", ERXProperties.stringForKey( "er.javamail.debugEnabled") );
			System.setProperty("er.javamail.senderQueue.size", ERXProperties.stringForKey( "er.javamail.senderQueue.size") );
			System.setProperty("er.javamail.milliSecondsWaitIfSenderOverflowed", ERXProperties.stringForKey( "er.javamail.milliSecondsWaitIfSenderOverflowed") );
			*/
			ERJavaMail.sharedInstance().finishInitialization();
        }
        catch(Exception e) {
			System.err.println("Application.Application() - exception - " + e);
        
        }    
	}
	/*
	public WOResponse handleActionRequestError(WORequest aRequest, Exception exception, String reason, WORequestHandler aHandler, String actionClassName, String actionName, Class actionClass, WOAction actionInstance) {
		   return handleException(exception, actionInstance.context());
	}
	*/
	// Accessors
    public NSArray<String> currentProjects() {return currentProjects;}
    public void setCurrentProjects(NSArray<String> pValue) {currentProjects = pValue;}
    public NSArray<String> potentialSeverities() {return potentialSeverities;}
    public void setPotentialSeverities(NSArray<String> pValue) {potentialSeverities = pValue;}
    public NSArray<String> potentialStatus() {return potentialStatus;}
    public void setPotentialStatus(NSArray<String> pValue) {potentialStatus = pValue;}
    public NSArray<String> potentialPriority() {return potentialPriority;}
    public void setPotentialPriority(NSArray<String> pValue) {potentialPriority = pValue;}
    public NSArray<String> potentialProducts() {return potentialProducts;}
    public void setPotentialProducts(NSArray<String> pValue) {potentialProducts = pValue;}
    public NSArray<String> potentialTypes() {return potentialTypes;}
    public void setPotentialTypes(NSArray<String> pValue) {potentialTypes = pValue;}
    public NSArray<String> potentialStates() {return potentialStates;}
    public void setPotentialStates(NSArray<String> pValue) {potentialStates = pValue;}
    public NSArray<String> potentialVersions() {return potentialVersions;}
    public void setPotentialVersions(NSArray<String> pValue) {potentialVersions = pValue;}
    public NSArray<String> potentialVerticals() {return potentialVerticals;}
    public void setPotentialVerticals(NSArray<String> pValue) {potentialVerticals = pValue;}
    public NSArray<String> potentialComponents() {return potentialComponents;}
    public void setPotentialComponents(NSArray<String> pValue) {potentialComponents = pValue;}
    public NSArray<String> potentialResolutions() {return potentialResolutions;}
    public void setPotentialResolutions(NSArray<String> pValue) {potentialResolutions = pValue;}
    public NSArray<String> potentialMilestones() {return potentialMilestones;}
    public void setPotentialMilestones(NSArray<String> pValue) {potentialMilestones = pValue;}
    public NSDictionary<String, Short> idsForProducts() {return idsForProducts;}
    public void setIdsForProducts(NSDictionary<String, Short> pValue) {idsForProducts = pValue;}
    public String bugzillaHostUrl() {return bugzillaHostUrl;}
    public void setBugzillaHostUrl(String pValue) {bugzillaHostUrl = pValue;}
    public String bugzillaHost() {return bugzillaHost;}
    public void setBugzillaHost(String pValue) {bugzillaHost = pValue;}
    public String bugzillaProtocol() {return bugzillaProtocol;}
    public void setBugzillaProtocol(String pValue) {bugzillaProtocol = pValue;}
    public boolean isImation() {return isImation;}
}

// Generated by the WOLips Templateengine Plug-in at Apr 11, 2012 11:05:03 AM
package com.ironkey.tracker;

import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOSession;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import com.webobjects.eoaccess.*;

import java.util.Enumeration;
import java.net.InetAddress;

import com.ironkey.tracker.components.*;
import com.webobjects.appserver.*;

import er.extensions.eof.*;

public class Session extends WOSession {
	private static final long serialVersionUID = 1L;
	public String supportProject = "1.5";
	public String selectedProject = "1.5";
	public String selectedItemType = "All";
	public String currentPageName;
    /** @TypeInfo Profiles */
    public EOEnterpriseObject user;
	public HomePage homePage;
    protected NSArray<String> potentialProjects;
	public String aString;
    public NSArray<String> itemTypes;
    protected boolean isAdmin;
   
   
	public Session() {
		super();
        //System.out.println("Session.Session()");
        setStoresIDsInURLs(false);
        setStoresIDsInCookies(true);
		
		defaultEditingContext().setDelegate(new ERXEditingContextDelegate());
		isAdmin();	
		//selectionSort();
		//int[] initialArray = {-4,6,3,-7,9,1,0};
		//bubbleSort(initialArray);
				// Print result
		/*int num = initialArray.length;
		System.out.print("This is sorted array - ");
		for (int i = 0; i < num; i++) {
			System.out.print(initialArray[i] + ", ");
		}
		*/
		//largestSubArray(initialArray);
		//nestedForLoops(initialArray);

	}
	public void awake( WORequest aRequest, WOContext aContext) {
        System.out.println("session - awake() ");
	}
	
	public boolean isAdmin() {
		
		try {
            InetAddress local = InetAddress.getLocalHost();
            String hostname=local.getHostName();
		//System.out.println("hostname - '" + hostname + "'");
			if(hostname.equals("jsstest.mtv")) {
				isAdmin=true;
			}
        }
        catch(Exception e) {
            System.err.println("Session.isAdmin() - " + e);
        }
		return isAdmin;
	}

	public String selectedProject() {
	    return selectedProject;
	}
	public void setSelectedProject(String pVal) {
	    selectedProject = pVal;
	}
	
	public String realname() {
		String returnVal = null;
		if(getUser() != null) {
			returnVal = (String)getUser().valueForKey("realname");
		}
		return returnVal;
	}
    public void setUser (EOEnterpriseObject pUser) {
        user = pUser;
    }
    public EOEnterpriseObject getUser() {
        return user;
    }
	public NSArray<String> currentProjects() {
        return potentialProjects();
    }
	public NSArray<String> potentialProjects() {
        if(potentialProjects == null) {
            potentialProjects = (NSArray<String>)rowsForSql("select distinct(version) from bugs");
        }
        return potentialProjects;
    }

    public NSArray<String> itemTypes() {
       if(itemTypes == null) {
           NSMutableArray<String> tempTypes = new NSMutableArray<String>(potentialProducts());
           //tempTypes.insertObjectAtIndex("All", 0);
           itemTypes = new NSArray<String>(tempTypes);
       }
         return itemTypes;
    }
    public NSArray<String> potentialSeverities() {
        Application app = (Application)Application.application();
        if(app.potentialSeverities() == null) {
            app.setPotentialSeverities(rowsForSql("select distinct(bug_severity) from bugs"));
        }
        return app.potentialSeverities();
    }
    public NSArray<String> potentialStatus() {
        Application app = (Application)Application.application();
        if(app.potentialStatus() == null) {
            app.setPotentialStatus((NSArray<String>)sortArray((NSMutableArray<String>)rowsForSql("select distinct(bug_status) from bugs")));
        }
        return app.potentialStatus();
    }
    public NSArray<String> potentialPriority() {
        Application app = (Application)Application.application();
        if(app.potentialPriority() == null) {
            app.setPotentialPriority(rowsForSql("select distinct(priority) from bugs"));
        }
        return app.potentialPriority();
    }
    public NSArray<String> potentialProducts() {
    	Application app = (Application)Application.application();
    	//Application app = new Application();
        if(app.potentialProducts() == null) {
            app.setPotentialProducts(rowsForSql("select distinct(name) from products"));
        }
        return app.potentialProducts();
    }
    public NSArray<String> potentialTypes() {
    	Application app = (Application)Application.application();
        if(app.potentialTypes() == null) {
        	app.setPotentialTypes(rowsForSql("select distinct(value) from cf_type order by sortkey"));
        }
        return app.potentialTypes();
    }
    public NSArray<String> potentialStates() {
        Application app = (Application)Application.application();
        if(app.potentialStates() == null) {
            app.setPotentialStates(rowsForSql("select distinct(value) from cf_status order by sortkey"));
        }
        return app.potentialStates();
    }
    public NSArray<String> potentialVersions() {
        Application app = (Application)Application.application();
        if(app.potentialVersions() == null) {
            //app.setPotentialVersions(rowsForSql("select distinct(version) from bugs"));
           // app.setPotentialVersions(rowsForSql("select distinct(value) from versions where product_id in (2,3,17) order by value"));
            app.setPotentialVersions(rowsForSql("select distinct(value) from versions order by value"));
        }
        return app.potentialVersions();
    }
    public NSArray<String> potentialVerticals() {
        Application app = (Application)Application.application();
        if(app.potentialVerticals() == null) {
            app.setPotentialVerticals(rowsForSql("select distinct(name) from components where product_id=3"));
        }
        return app.potentialVerticals();
    }

    public NSArray<String> potentialComponents() {
        Application app = (Application)Application.application();
        if(app.potentialComponents() == null) {
            app.setPotentialComponents(rowsForSql("select distinct(rep_platform) from bugs"));
        }
        return app.potentialComponents();
    }
 
    public NSArray<String> potentialResolutions() {
        Application app = (Application)Application.application();
        if(app.potentialResolutions() == null) {
            app.setPotentialResolutions(rowsForSql("select distinct(resolution) from bugs"));
        }
        return app.potentialResolutions();
    }
    public NSArray<String> potentialMilestones() {
        Application app = (Application)Application.application();
        if(app.potentialMilestones() == null) {
            NSMutableArray<String> tempArray = (NSMutableArray<String>)rowsForSql("select distinct(value) from milestones where product_id <> 8 order by value");
            //NSMutableArray tempArray = (NSMutableArray)rowsForSql("select value from milestones where product_id=3 order by sortkey");
           // if(tempArray.containsObject("RTP") == false) {
           //     int index = tempArray.indexOfObject("RC1");
           //     tempArray.insertObjectAtIndex("RTP", index+1);
           // }
            app.setPotentialMilestones((NSArray<String>)tempArray);
        }
        return app.potentialMilestones();
    }
	
	
    public NSDictionary<String,Short> idsForProducts() {
        Application app = (Application)Application.application();
       // Application app = new Application();
        
		EOFetchSpecification fs;
		NSMutableDictionary<String,Short> productIds = null;
		
        if(app.idsForProducts() == null) {
			productIds = new NSMutableDictionary<String,Short>();
			fs = new EOFetchSpecification("Products", null, null);
			NSArray<EOEnterpriseObject> products = (NSArray<EOEnterpriseObject>)defaultEditingContext().objectsWithFetchSpecification(fs);
			
			Enumeration<EOEnterpriseObject> enumer = products.objectEnumerator();
			while(enumer.hasMoreElements()) {
				EOEnterpriseObject product = (EOEnterpriseObject)enumer.nextElement();
				Short id = (Short)product.valueForKey("productId");
				String name = (String)product.valueForKey("productName");
				productIds.setObjectForKey(id, name);
			}
			app.setIdsForProducts((NSDictionary<String,Short>)productIds);
		}
		return app.idsForProducts();
    }

	
		// need to cache at session or application level
	public int idForProduct(String pProductName) {
		int returnVal = -1;
		Short id = (Short)idsForProducts().objectForKey(pProductName);
		if(id != null) {
			returnVal =  id.intValue();
		}
		return returnVal;
    }

	
	public NSArray<String> potentialKeywords() {
        return rowsForSql("select name from keyworddefs");
	}
    public NSArray<String> potentialValues(String key) {

        NSArray<String> returnVal = null;
        if(key.equals("bugSeverity")) {
            returnVal = potentialSeverities();
        }
        else if(key.equals("bugStatus")) {
            returnVal = potentialStatus();
        }
        else if(key.equals("priority")) {
            returnVal = potentialPriority();
        }
        else if(key.equals("product.productName")) {
            returnVal = potentialProducts();
        }
        else if(key.equals("version")) {
            returnVal = potentialVersions();
        }
        else if((key.equals("release")) || (key.equals("releaseName"))) {
            returnVal = potentialVersions();
        }
        else if(key.equals("vertical.componentName")) {
            returnVal = potentialVerticals();
        }
        
        else if(key.equals("component")) {
            returnVal = potentialComponents();
        } 
        else if(key.equals("resolution")) {
            returnVal = potentialResolutions();
        }
        else if(key.equals("targetMilestone")) {
            returnVal = potentialMilestones();
        }
        else if(key.equals("milestone")) {
            returnVal = potentialMilestones();
        }
        else if(key.equals("milestoneVersion")) {
            returnVal = currentProjects();
        }
        return returnVal;
    }

	
	public NSArray<String> rowsForSql(String pSqlString) {
        Enumeration<NSMutableDictionary<String,String>> enumer;
        //String sqlString = "select distinct(bug_severity) from bugs"; // Assume exists
        String modelName = "Tracker"; // Assume exists
        NSArray<NSMutableDictionary<String,String>> rawResults= null;
        NSMutableArray<String> results = new NSMutableArray<String>();
		
        try {
            rawResults = EOUtilities.rawRowsForSQL(defaultEditingContext(),modelName, pSqlString);
        }
        catch (Exception e) {
            System.err.println("Session.rowsForSql - " + e);
        }
        
        enumer = rawResults.objectEnumerator();
        while(enumer.hasMoreElements()) {
            NSMutableDictionary<String,String> val = (NSMutableDictionary<String,String>)enumer.nextElement();
            results.addObjectsFromArray(val.allValues());
            //System.out.println("TYPE - " + val.getClass().getName());
        }
        enumer = null;
		//System.out.println("rawResults - " + rawResults.toString());
        //System.out.println("results - " + results.toString());
        return (NSArray<String>)results;
    }
	public NSMutableArray<String> sortArray(NSMutableArray<String> pUnsorted) {
        NSMutableArray<String> sortedArray = new NSMutableArray<String>();
        NSMutableArray<String> copyOrig = new NSMutableArray<String>(pUnsorted);
        int numItems;
        String tempLowest = null;
        String tempString;

        // if unsorted contains any in predefined array, use the predefined sorting.
        NSArray<String> stateValues= new NSArray<String>(new String[] {"NEW", "UNCONFIRMED", "CONFIRMED", "ASSIGNED", "RESOLVED","REOPENED", "VERIFIED","CLOSED"});

        if(stateValues.firstObjectCommonWithArray(pUnsorted) != null) {
            sortedArray = sortItemsAsDefined(pUnsorted, stateValues);
        }
        else {  // Sort alphabetically
            numItems = pUnsorted.count();
            for(int i = 0; i<numItems; i++) {

                Enumeration<String> enumer2 = copyOrig.objectEnumerator();
                while(enumer2.hasMoreElements()) {
                    tempString = (String)enumer2.nextElement();
                    if(tempLowest == null) {
                        tempLowest = tempString;  // initialize
                    }
                    else {
                        tempLowest = lower(tempString,tempLowest);  // initialize

                    }
                }
                copyOrig.removeObject(tempLowest);
                sortedArray.addObject(tempLowest);
                tempLowest = null;
            }
        }
        return sortedArray;
    }

	// SelectionSort
	// sorts by identifying the lowest value and swaping it with the left current position (starting left to right)
	// sorts in-place
	public void selectionSort() {
		int[] initialArray = {4,6,3,7,9,1,0};
		int lowest;  // position of the lowest value
				
		int num = initialArray.length;
		// iterate through each element of array
		for (int j = 0; j < num; j++) {
			lowest = j;  // starts with first item as lowest
			// determine if there are lower values after the current position
			for (int i = j+1; i < num; i++) {
				//is element lower than current lowest,  if so, set its position as lowest
				if(initialArray[i] < initialArray[lowest]) {
					lowest = i;  // set lowest to current position
				}
			}
			
			// Swap current lowest with new lowest
			if(lowest != j) {
				int temp = initialArray[j];
				initialArray[j]  = initialArray[lowest];
				initialArray[lowest] = temp;
			}
		}
		
		// Print result
		System.out.print("This is sorted array - ");

		for (int i = 0; i < num; i++) {
			System.out.print(initialArray[i] + ", ");
		}
	}
	
	// BubbleSort
    //  Recursively swaps consecutive values if the right is lower than left
	public void bubbleSort(int[] pUnsorted) {
		boolean changed = false;
				
		int num = pUnsorted.length;
		// iterate through each element of array
		for (int j = 0; j < num-1; j++) {
			// Swap current lowest with new lowest
			if(pUnsorted[j+1] < pUnsorted[j]) {
				//System.out.println("SWAP - " + pUnsorted[j+1] + " / " + pUnsorted[j] );
				// swap
				int temp = pUnsorted[j];
				pUnsorted[j]  = pUnsorted[j+1];
				pUnsorted[j+1] = temp;
				changed = true;
			}
		}
		
		if(changed == true) {
			bubbleSort(pUnsorted);
		}
	}
	
	//		int[] initialArray = {4,6,3,7,9,1,0};
	public void largestSubArray(int[] pUnsorted) {
		int num = pUnsorted.length;
		int longest = 0;
		int[] longestArray= new int[num];
		int[] tempArray;

		// Iterate through each item in the array
		for (int i = 0; i < num; i++) {
			System.out.println();
			//System.out.println("outerloop(i) - " + i + " / " + pUnsorted[i]);
			// For each item in the array, Iterate through all of the items in the array up to (incuding) the current item 
			for (int j = 0; j <=i; j++) {
				//System.out.println("\tmmidloop(j) - " + j+ " / " + pUnsorted[j] + "(i="+i+")");
				int sum = 0;
				int index = 0;
				tempArray = new int[i+1-j];
				// iterate through all items, dropping the first one each time (1234, 234, 34, 4)
				for (int k = j; k<=i; k++) {
						sum +=  pUnsorted[k]; // add all the items
						tempArray[index++] = pUnsorted[k];	// save a copy of the current values				
						//System.out.println("\t\tinnerloop(k) - " + k + " / " + pUnsorted[k] + "(i="+i+", j="+j +")");
				}
				if(sum > longest) {  // is sum of current values greater than any previous
					longest = sum;   // if so - reset the largest
					// copy current array as potential return value
					longestArray = new int[tempArray.length];
					for (int n = 0; n < tempArray.length; n++) {
						longestArray[n] = tempArray[n];
					}

				}
				//System.out.println();
			}		
		}
		
		// Print result
		int numItems = longestArray.length;
		System.out.print("This is longest sub array - ");
		for (int i = 0; i < numItems; i++) {
			System.out.print(longestArray[i] + ", ");
		}
	}
	
	public void nestedForLoops(int[] pUnsorted) {
		int num;
		
		num = pUnsorted.length;
		// Iterate through each item in the array
		for (int i = 0; i < num; i++) {
			System.out.println("outerloop(i) - " + i + " / " + pUnsorted[i]);
			// For each item in the array, Iterate through all of the items in the array  
			for (int j = 0; j <=i; j++) {
				System.out.println("\tmmidloop(j) - " + j+ " / " + pUnsorted[j] + "(i="+i+")");
				//System.out.println();
					for (int k = j; k <=i; k++) {
						System.out.println("\t\tinnerloop(k) - " + k+ " / " + pUnsorted[k] + "(i="+i+")");
					}
			}		
		}
	}
	
    public NSMutableArray<String> sortItemsAsDefined(NSArray<String> unorderedArray, NSArray<String> orderingDefinitionArray) {
        NSMutableArray<String> sortedArray = new NSMutableArray<String>();
        Enumeration<String> enumer = orderingDefinitionArray.objectEnumerator();
        while(enumer.hasMoreElements()) {
            String value = (String)enumer.nextElement();
            if(unorderedArray.containsObject(value)) {
                sortedArray.addObject(value);
            }
        }
        return sortedArray;
    }
    private String lower(String str1, String str2) {
        return (str1.compareTo(str2) <0 ? str1 : str2);
    }

}
